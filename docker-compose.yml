version: "3.7"

services:
  manager:
    image: crack-manager:1.4.0
    container_name: manager
    ports:
      - "8080:8080"
    depends_on:
      - rabbitmq
      - mongo-1
      - mongo-2
      - mongo-3
    networks:
      - crack-network
      - mongo-cluster
    environment:
      - SPRING_RABBITMQ_USERNAME=manager
      - SPRING_RABBITMQ_PASSWORD=manager
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_DATA_MONGODB_HOST=mongo-1

  worker-1:
    image: crack-worker:1.2.1
    container_name: worker-1
    ports:
      - "8081"
    depends_on:
      - rabbitmq
    networks:
      - crack-network
    environment:
      - SPRING_RABBITMQ_USERNAME=worker
      - SPRING_RABBITMQ_PASSWORD=worker
      - SPRING_RABBITMQ_HOST=rabbitmq

  worker-2:
    image: crack-worker:1.2.1
    container_name: worker-2
    ports:
      - "8082"
    depends_on:
      - rabbitmq
    networks:
      - crack-network
    environment:
      - SPRING_RABBITMQ_USERNAME=worker
      - SPRING_RABBITMQ_PASSWORD=worker
      - SPRING_RABBITMQ_HOST=rabbitmq


  rabbitmq:
    image: rabbitmq:3.13.1-management-alpine
    container_name: rabbitmq
    ports:
      # The standard AMQP protocol port
      - "5672:5672"
      # HTTP management UI
      - "15672:15672"
    volumes:
      - rabbitmq-volume:/var/lib/rabbitmq/data
    networks:
      - crack-network
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin

  mongo-1:
    container_name: mongo-1
    image: mongo:4.4.29
    command: --replSet crack-rs --bind_ip_all --port 27017
    ports:
      - "27017:27017"
    volumes:
      - ./mongo-entrypoint:/docker-entrypoint-initdb.d
      - db-data4:/data/db
      - mongo-config:/data/configdb
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'crack-rs',members:[{_id:0,host:'mongo-1:27017',priority:1},{_id:1,host:'mongo-2:27018',priority:0.5},{_id:2,host:'mongo-3:27019',priority:0.5}]}) }" | mongo --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      retries: 30
    networks:
      - mongo-cluster
    environment:
      #- MONGO_INITDB_ROOT_USERNAME=manager
      #- MONGO_INITDB_ROOT_PASSWORD=manager
      - MONGO_INITDB_DATABASE=crack

  mongo-2:
    container_name: mongo-2
    image: mongo:4.4.29
    command: --replSet crack-rs --bind_ip_all --port 27018
    ports:
      - "27018:27018"
    volumes:
      - ./mongo-entrypoint:/docker-entrypoint-initdb.d
      - db-data4-2:/data/db2
      - mongo-config-2:/data/configdb2
    networks:
      - mongo-cluster
    environment:
      #- MONGO_INITDB_ROOT_USERNAME=manager
      #- MONGO_INITDB_ROOT_PASSWORD=manager
      - MONGO_INITDB_DATABASE=crack

  mongo-3:
    container_name: mongo-3
    image: mongo:4.4.29
    command: --replSet crack-rs --bind_ip_all --port 27019
    ports:
      - "27019:27019"
    volumes:
      - ./mongo-entrypoint:/docker-entrypoint-initdb.d
      - db-data4-3:/data/db3
      - mongo-config-3:/data/configdb3
    networks:
      - mongo-cluster
    environment:
      #- MONGO_INITDB_ROOT_USERNAME=manager
      #- MONGO_INITDB_ROOT_PASSWORD=manager
      - MONGO_INITDB_DATABASE=crack

networks:
  crack-network:
    driver: bridge
  mongo-cluster:
    driver: bridge

volumes:
  db-data4:
  db-data4-2:
  db-data4-3:
  mongo-config:
  mongo-config-2:
  mongo-config-3:
  rabbitmq-volume:
  rabbitmq-volume-2:
  rabbitmq-volume-3: